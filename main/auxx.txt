
/* 
ROOT NODE
*/

#include <stdio.h>
#include <stdlib.h>

#include <string.h>
#include <driver/gpio.h>
#include "esp_system.h"
#include "esp_event.h"
#include "esp_log.h"
#include "esp_mesh.h"
#include "esp_mesh_internal.h"
#include "nvs_flash.h"
#include "mqtt_app.h"
#include "dht22.h"
#include "sct013-30a.h"
/*******************************************************
 *                Macros
 *******************************************************/

/*******************************************************
 *                Constants
 *******************************************************/

#define LED_BULTIN 2
#define GPIO_DHT22 4
#define GPIO_SCT013 5
#define RX_SIZE          (512)
#define TX_SIZE          (512)
  
/*******************************************************
 *                Variable Definitions
 *******************************************************/

static const char *MESH_TAG = "mesh_main";
static const uint8_t MESH_ID[6] = { 0x77, 0x77, 0x77, 0x77, 0x77, 0x77};
// Temperatura e umidade
static uint8_t MESH_ID_40[6] = { 0x94, 0xb9, 0x7e, 0xd6, 0x41, 0x40};
// Corremte
static uint8_t MESH_ID_dc[6] = { 0x30, 0xae, 0xa4, 0x75, 0x50, 0xdc};
// LED0
static uint8_t MESH_ID_f4[6] = { 0x7c, 0x9e, 0xbd, 0x54, 0xc0, 0xf4};
// LED1
static uint8_t MESH_ID_38[6] = { 0x0c, 0xb8, 0x15, 0xf3, 0xd8, 0x38};
//static char tx_buf[TX_SIZE] = { 0, };
static char rx_buf[RX_SIZE] = { 0, };
static bool is_running = true;
static bool is_mesh_connected = false;
static mesh_addr_t mesh_parent_addr;
static int mesh_layer = -1;
static esp_netif_t *netif_sta = NULL;

static esp_ip4_addr_t current_ip;
mesh_addr_t route_table[CONFIG_MESH_ROUTE_TABLE_SIZE];
int route_table_size = 0;
/*******************************************************
 *                Function Declarations
 *******************************************************/

static char format_msg_mqtt[100] = "";
static char empresa[25] = "ufcg_cg_sede/";
static char predio[25] = "caa/";
static char andar[25] = "2/";
static char area[25] = "sala2/";
static char dispTipo[25] = "atuador/";
static char dispNome[25] = "temperatura";
static char dispValor[25] = "23";
static char tag_mqtt_content[1] = "|";

/*******************************************************
 *                Function Definitions
 *******************************************************/
void reverse(char* str, int len)
{
    int i = 0, j = len - 1, temp;
    while (i < j) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
}
 
int intToStr(int x, char str[], int d)
{
    int i = 0;
    while (x) {
        str[i++] = (x % 10) + '0';
        x = x / 10;
    }

    while (i < d)
        str[i++] = '0';
 
    reverse(str, i);
    str[i] = '\0';
    return i;
}

void ftoa(float n, char* res, int afterpoint)
{
    int ipart = (int)n;
    float fpart = n - (float)ipart;
    int i = intToStr(ipart, res, 0);
 
    if (afterpoint != 0) {
        res[i] = '.'; // add dot
        for (int i = 0; i < afterpoint; i++) fpart = fpart * 10;
        intToStr((int)fpart, res + i + 1, afterpoint);
    }
}


void send_data_mqtt(char *msg_mqtt)
{
    strcpy(msg_mqtt, ""); //Zerar endereço
    strcat(msg_mqtt,empresa);
    strcat(msg_mqtt,predio);
    strcat(msg_mqtt,andar);
    strcat(msg_mqtt,area);
    strcat(msg_mqtt,dispTipo);
    strcat(msg_mqtt,dispNome);
    strcat(msg_mqtt,tag_mqtt_content);
    strcat(msg_mqtt,dispValor);

    esp_err_t err;
    mesh_data_t data;
    data.data = msg_mqtt;
    data.size = 200;
    data.proto = MESH_PROTO_BIN;
    data.tos = MESH_TOS_P2P;
    is_running = true;

    err = esp_mesh_send(NULL, &data, MESH_DATA_P2P, NULL, 0);
    if (err == ESP_OK) 
    {
        ESP_LOGI("SENT OK", ": sent with SUCCESS");
    } else ESP_LOGE("SENT ERROR",": sent with err code: %d", err);
}

void DHT_task(void *pvParameter)
	{
		setDHTgpio(4);
		printf( "Starting DHT Task\n\n");
        static char tempStr[5] = "", umiStr[5] = "";
        static float umiFloatSent = 0, tempFloatSent = 0, umiFloatNow = 0, tempFloatNow = 0;
        strcpy(dispTipo, "sensor/"); // Atualizar a variável tipo de dispositivo
		while(1) {
            
			int ret = readDHT();
			errorHandler(ret);

            umiFloatNow = getHumidity();
            tempFloatNow = getTemperature();
            printf("\n umidade: %.2f, temp: %.2f\n", umiFloatNow, tempFloatNow);
            ftoa(umiFloatNow, umiStr, 1);
            ftoa(tempFloatNow, tempStr, 1);

            if ((umiFloatNow-umiFloatSent) >= 0.5 || (umiFloatNow-umiFloatSent) <= -0.5 )
            { // Formatar topic da umidade e enviar para o root
                umiFloatSent = umiFloatNow;
                strcpy(dispNome, "umidade");
                strcpy(dispValor, umiStr);
                send_data_mqtt(format_msg_mqtt);
            }
            if ((tempFloatNow-tempFloatSent) >= 0.1 || (tempFloatNow-tempFloatSent) <= -0.1)
            { // Formatar topic da temperatura e enviar para o root
                tempFloatSent = tempFloatNow;
                strcpy(dispNome, "temperatura");
                strcpy(dispValor, tempStr);
                send_data_mqtt(format_msg_mqtt);
            }
            /////////
            char mac40[50] = "";
            char res[5] = "";

            esp_err_t err;
            mesh_data_t data1;
            data1.data = mac40;
            data1.size = 100;
            data1.proto = MESH_PROTO_BIN;
            data1.tos = MESH_TOS_P2P;
            
            strcpy(mac40, "");
            strcat(mac40, "40|");
            intToStr(mesh_layer, res, 0);
            strcat(mac40, res);
            printf("topico: %s\n", mac40);
            err = esp_mesh_send(NULL, &data1, MESH_DATA_P2P, NULL, 0);
            if (err == ESP_OK) 
            {
                ESP_LOGI("SENT OK", ": sent with SUCCESS 1");
            } else ESP_LOGE("SENT ERROR",": sent with err code: %d", err);
            
			vTaskDelay( 2000 / portTICK_RATE_MS );
		}
	}

void SCT013_task(void *pvParameter)
{
    while (1) {
        initSCT013();
        readSCT013();


        /////////
            char mac40[50] = "";
            char res[5] = "";

            esp_err_t err;
            mesh_data_t data1;
            data1.data = mac40;
            data1.size = 100;
            data1.proto = MESH_PROTO_BIN;
            data1.tos = MESH_TOS_P2P;
            
            strcpy(mac40, "");
            strcat(mac40, "dc|");
            intToStr(mesh_layer, res, 0);
            strcat(mac40, res);
            printf("topico: %s\n", mac40);
            err = esp_mesh_send(NULL, &data1, MESH_DATA_P2P, NULL, 0);
            if (err == ESP_OK) 
            {
                ESP_LOGI("SENT OK", ": sent with SUCCESS 1");
            } else ESP_LOGE("SENT ERROR",": sent with err code: %d", err);
            
        vTaskDelay(1000 / portTICK_RATE_MS);
    }
}

void esp_mesh_p2p_rx_main(void *arg)
{
    int recv_count = 0;
    esp_err_t err;
    mesh_addr_t from;
    int send_count = 0;
    mesh_data_t data;
    int flag = 0;
    data.data = rx_buf;
    data.size = RX_SIZE;
    is_running = true;

    mesh_addr_t route_table[CONFIG_MESH_ROUTE_TABLE_SIZE];
    int route_table_size = 0;

    char* mqtt_topic;
    char* mqtt_content;
    int setbreak = 0;

    while (is_running) {
        // Alocando memória estimada necessária
        mqtt_content = (char*)malloc(100 * sizeof(char));
        mqtt_topic = (char*)malloc(100 * sizeof(char));

        esp_mesh_get_routing_table((mesh_addr_t *) &route_table,
                                   CONFIG_MESH_ROUTE_TABLE_SIZE * 6, &route_table_size);

        data.size = RX_SIZE;
        err = esp_mesh_recv(&from, &data, portMAX_DELAY, &flag, NULL, 0);
        ESP_LOGE("CONTENT","RX: %s", data.data);
        if (err != ESP_OK || !data.size) {
            ESP_LOGE(MESH_TAG, "err:0x%x, size:%d", err, data.size);
            continue;
        }
        
        int data_len = strlen(data.data);
        for (int i = 0; i < data_len+1 ; i++) {
            if ((int)data.data[i] == 124) // "|" representa o número 124 na tabela ASCII
            { 
                setbreak = i;
                for (int j = setbreak+1; j < data_len; j++) mqtt_content[j-1-setbreak] = data.data[j];
                mqtt_topic[setbreak] = '\0';
                mqtt_content[data_len-1-setbreak] = '\0';
                break;
            }
            mqtt_topic[i] = data.data[i];
        }
        
        if (mqtt_topic == NULL) {
            ESP_LOGW("MALLOC","Memory not allocated.\n");
            exit(0);
        }

        if(esp_mesh_is_root()) mqtt_app_publish(mqtt_topic, mqtt_content);

        free(mqtt_topic);
        free(mqtt_content);

        printf("CAMPO RX: %s \n", data.data); 
        
        if (!(recv_count % 1)) {
            ESP_LOGW(MESH_TAG,
                     "[#RX:%d/%d][L:%d] parent:"MACSTR", receive from "MACSTR", size:%d, heap:%d, flag:%d[err:0x%x, proto:%d, tos:%d]",
                     recv_count, send_count, mesh_layer,
                     MAC2STR(mesh_parent_addr.addr), MAC2STR(from.addr),
                     data.size, esp_get_minimum_free_heap_size(), flag, err, data.proto,
                     data.tos);
        }
    }
    vTaskDelete(NULL);
}

void route_table_available()
{
    while (1)
    {   
        esp_mesh_get_routing_table((mesh_addr_t *) &route_table,
                                   CONFIG_MESH_ROUTE_TABLE_SIZE * 6, &route_table_size);

        ESP_LOGE(MESH_TAG, "[L:%d]parent:"MACSTR", heap:%d", mesh_layer, MAC2STR(mesh_parent_addr.addr), esp_get_minimum_free_heap_size());
        for (int i = 0; i < route_table_size; i++) 
        {
            ESP_LOGE(MESH_TAG, ""MACSTR"", MAC2STR(route_table[i].addr));
        }
        vTaskDelay(4000 / portTICK_RATE_MS);
    }
    
}

uint8_t estado = 0;
void task_led0()
{   
    char resled0[5] = "";
    char msgled0[100] = "";

    esp_err_t err;
    mesh_data_t data;
    data.data = msgled0;
    data.size = 200;
    data.proto = MESH_PROTO_BIN;
    data.tos = MESH_TOS_P2P;
    is_running = true;
    while (1)
    {   
        estado = ~estado;
        gpio_set_level(LED_BULTIN, estado);
        intToStr(estado, resled0, 1);

        ESP_LOGW(MESH_TAG, "LED0: %d\n", estado);
        strcpy(msgled0, "");
        strcat(msgled0, "ufcg_cg_sede/caa/2/sala2/sensor/led0");

        strcat(msgled0, "|");
        strcat(msgled0, resled0);

        printf("\n %s \n", msgled0);

        err = esp_mesh_send(NULL, &data, MESH_DATA_P2P, NULL, 0);
        if (err == ESP_OK) 
        {
            ESP_LOGI("SENT OK", ": sent with SUCCESS");
        } else ESP_LOGE("SENT ERROR",": sent with err code: %d", err);
          
        /////////
            char mac40[50] = "";
            char res[5] = "";

            esp_err_t err;
            mesh_data_t data1;
            data1.data = mac40;
            data1.size = 100;
            data1.proto = MESH_PROTO_BIN;
            data1.tos = MESH_TOS_P2P;
            
            strcpy(mac40, "");
            strcat(mac40, "38|");
            intToStr(mesh_layer, res, 0);
            strcat(mac40, res);
            printf("topico: %s\n", mac40);
            err = esp_mesh_send(NULL, &data1, MESH_DATA_P2P, NULL, 0);
            if (err == ESP_OK) 
            {
                ESP_LOGI("SENT OK", ": sent with SUCCESS 1");
            } else ESP_LOGE("SENT ERROR",": sent with err code: %d", err);
            
        vTaskDelay(1000 / portTICK_RATE_MS);
    }
    
}

void task_led1()
{
    
    char resled1[5] = "";
    char msgled1[100] = "";

    esp_err_t err;
    mesh_data_t data;
    data.data = msgled1;
    data.size = 200;
    data.proto = MESH_PROTO_BIN;
    data.tos = MESH_TOS_P2P;
    is_running = true;

    while (1)
    {   
        estado = ~estado;
        gpio_set_level(LED_BULTIN, estado);
        intToStr(estado, resled1, 1);

        ESP_LOGW(MESH_TAG, "LED1: %d\n", estado);
        strcpy(msgled1, "");
        strcat(msgled1, "ufcg_cg_sede/caa/2/sala2/sensor/led1");

        strcat(msgled1, "|");
        strcat(msgled1, resled1);

        printf("\n %s \n", msgled1);

        err = esp_mesh_send(NULL, &data, MESH_DATA_P2P, NULL, 0);
        if (err == ESP_OK) 
        {
            ESP_LOGI("SENT OK", ": sent with SUCCESS 0");
        } else ESP_LOGE("SENT ERROR",": sent with err code: %d", err);
        /////////
            char mac40[50] = "";
            char res[5] = "";

            esp_err_t err;
            mesh_data_t data1;
            data1.data = mac40;
            data1.size = 100;
            data1.proto = MESH_PROTO_BIN;
            data1.tos = MESH_TOS_P2P;
            
            strcpy(mac40, "");
            strcat(mac40, "f4|");
            intToStr(mesh_layer, res, 0);
            strcat(mac40, res);
            printf("topico: %s\n", mac40);
            err = esp_mesh_send(NULL, &data1, MESH_DATA_P2P, NULL, 0);
            if (err == ESP_OK) 
            {
                ESP_LOGI("SENT OK", ": sent with SUCCESS 1");
            } else ESP_LOGE("SENT ERROR",": sent with err code: %d", err);
            

        vTaskDelay(1000 / portTICK_RATE_MS);
    }
    
}

bool mac_comp(uint8_t* mac_id)
{
    bool ret_comp = true;

    esp_mesh_get_routing_table((mesh_addr_t *) &route_table, CONFIG_MESH_ROUTE_TABLE_SIZE * 6, &route_table_size);

    for (int i = 0; i < 6; i++)
    {
        if (mac_id[i] != route_table[0].addr[i]) ret_comp = false;
        printf("\n %x==%x \n", mac_id[i], route_table[0].addr[i]);
    }
    return ret_comp;
}

esp_err_t esp_mesh_comm_p2p_start(void)
{
    static bool is_comm_p2p_started = false;

    if (!is_comm_p2p_started) {
        is_comm_p2p_started = true;
         if(esp_mesh_is_root()) mqtt_app_start();
        
        xTaskCreate(esp_mesh_p2p_rx_main, "MPRX", 3072, NULL, 5, NULL);
        xTaskCreate(route_table_available, "TABLE", 2048, NULL, 5, NULL);

        if (mac_comp((uint8_t*)MESH_ID_dc)) // Corremte
        {
            xTaskCreate(SCT013_task, "SCT013", 3072, NULL, 5, NULL);

        }else if(mac_comp((uint8_t*)MESH_ID_40)) // Temperatura e umidade
        {
            xTaskCreate(&DHT_task, "DHT Task", 3072, NULL, 5, NULL);

        } else if(mac_comp((uint8_t*)MESH_ID_f4)) // LED1
        {
            xTaskCreate(&task_led0, "LED0", 3072, NULL, 5, NULL);

        }else if(mac_comp((uint8_t*)MESH_ID_38)) // LED0
        {
            xTaskCreate(&task_led1, "LED1", 3072, NULL, 5, NULL);
        }


    }
    return ESP_OK;
}

void mesh_event_handler(void *arg, esp_event_base_t event_base, int32_t event_id, void *event_data)
{
    mesh_addr_t id = {0,};
    static uint16_t last_layer = 0;

    switch (event_id) {
    case MESH_EVENT_STARTED: {
        esp_mesh_get_id(&id);
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_MESH_STARTED>ID:"MACSTR"", MAC2STR(id.addr));
        is_mesh_connected = false;
        mesh_layer = esp_mesh_get_layer();
    }
    break;
    case MESH_EVENT_STOPPED: {
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_STOPPED>");
        is_mesh_connected = false;
        mesh_layer = esp_mesh_get_layer();
    }
    break;
    case MESH_EVENT_CHILD_CONNECTED: {
        mesh_event_child_connected_t *child_connected = (mesh_event_child_connected_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_CHILD_CONNECTED>aid:%d, "MACSTR"",
                 child_connected->aid,
                 MAC2STR(child_connected->mac));
    }
    break;
    case MESH_EVENT_CHILD_DISCONNECTED: {
        mesh_event_child_disconnected_t *child_disconnected = (mesh_event_child_disconnected_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_CHILD_DISCONNECTED>aid:%d, "MACSTR"",
                 child_disconnected->aid,
                 MAC2STR(child_disconnected->mac));
    }
    break;
    case MESH_EVENT_ROUTING_TABLE_ADD: {
        mesh_event_routing_table_change_t *routing_table = (mesh_event_routing_table_change_t *)event_data;
        ESP_LOGW(MESH_TAG, "<MESH_EVENT_ROUTING_TABLE_ADD>add %d, new:%d, layer:%d",
                 routing_table->rt_size_change,
                 routing_table->rt_size_new, mesh_layer);
    }
    break;
    case MESH_EVENT_ROUTING_TABLE_REMOVE: {
        mesh_event_routing_table_change_t *routing_table = (mesh_event_routing_table_change_t *)event_data;
        ESP_LOGW(MESH_TAG, "<MESH_EVENT_ROUTING_TABLE_REMOVE>remove %d, new:%d, layer:%d",
                 routing_table->rt_size_change,
                 routing_table->rt_size_new, mesh_layer);
    }
    break;
    case MESH_EVENT_NO_PARENT_FOUND: {
        mesh_event_no_parent_found_t *no_parent = (mesh_event_no_parent_found_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_NO_PARENT_FOUND>scan times:%d",
                 no_parent->scan_times);
    }
    /* TODO handler for the failure */
    break;
    case MESH_EVENT_PARENT_CONNECTED: {
        mesh_event_connected_t *connected = (mesh_event_connected_t *)event_data;
        esp_mesh_get_id(&id);
        mesh_layer = connected->self_layer;
        memcpy(&mesh_parent_addr.addr, connected->connected.bssid, 6);
        ESP_LOGI(MESH_TAG,
                 "<MESH_EVENT_PARENT_CONNECTED>layer:%d-->%d, parent:"MACSTR"%s, ID:"MACSTR", duty:%d",
                 last_layer, mesh_layer, MAC2STR(mesh_parent_addr.addr),
                 esp_mesh_is_root() ? "<ROOT>" :
                 (mesh_layer == 2) ? "<layer2>" : "", MAC2STR(id.addr), connected->duty);
        last_layer = mesh_layer;
        is_mesh_connected = true;
        if (esp_mesh_is_root()) {
            esp_netif_dhcpc_stop(netif_sta);
            esp_netif_dhcpc_start(netif_sta);
        }
        esp_mesh_comm_p2p_start();
    }
    break;
    case MESH_EVENT_PARENT_DISCONNECTED: {
        mesh_event_disconnected_t *disconnected = (mesh_event_disconnected_t *)event_data;
        ESP_LOGI(MESH_TAG,
                 "<MESH_EVENT_PARENT_DISCONNECTED>reason:%d",
                 disconnected->reason);
        is_mesh_connected = false;
        //mesh_disconnected_indicator();
        mesh_layer = esp_mesh_get_layer();
    }
    break;
    case MESH_EVENT_LAYER_CHANGE: {
        mesh_event_layer_change_t *layer_change = (mesh_event_layer_change_t *)event_data;
        mesh_layer = layer_change->new_layer;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_LAYER_CHANGE>layer:%d-->%d%s",
                 last_layer, mesh_layer,
                 esp_mesh_is_root() ? "<ROOT>" :
                 (mesh_layer == 2) ? "<layer2>" : "");
        last_layer = mesh_layer;
        //mesh_connected_indicator(mesh_layer);
    }
    break;
    case MESH_EVENT_ROOT_ADDRESS: {
        mesh_event_root_address_t *root_addr = (mesh_event_root_address_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_ROOT_ADDRESS>root address:"MACSTR"",
                 MAC2STR(root_addr->addr));
    }
    break;
    case MESH_EVENT_VOTE_STARTED: {
        mesh_event_vote_started_t *vote_started = (mesh_event_vote_started_t *)event_data;
        ESP_LOGI(MESH_TAG,
                 "<MESH_EVENT_VOTE_STARTED>attempts:%d, reason:%d, rc_addr:"MACSTR"",
                 vote_started->attempts,
                 vote_started->reason,
                 MAC2STR(vote_started->rc_addr.addr));
    }
    break;
    case MESH_EVENT_VOTE_STOPPED: {
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_VOTE_STOPPED>");
        break;
    }
    case MESH_EVENT_ROOT_SWITCH_REQ: {
        mesh_event_root_switch_req_t *switch_req = (mesh_event_root_switch_req_t *)event_data;
        ESP_LOGI(MESH_TAG,
                 "<MESH_EVENT_ROOT_SWITCH_REQ>reason:%d, rc_addr:"MACSTR"",
                 switch_req->reason,
                 MAC2STR( switch_req->rc_addr.addr));
    }
    break;
    case MESH_EVENT_ROOT_SWITCH_ACK: {
        /* new root */
        mesh_layer = esp_mesh_get_layer();
        esp_mesh_get_parent_bssid(&mesh_parent_addr);
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_ROOT_SWITCH_ACK>layer:%d, parent:"MACSTR"", mesh_layer, MAC2STR(mesh_parent_addr.addr));
    }
    break;
    case MESH_EVENT_TODS_STATE: {
        mesh_event_toDS_state_t *toDs_state = (mesh_event_toDS_state_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_TODS_REACHABLE>state:%d", *toDs_state);
    }
    break;
    case MESH_EVENT_ROOT_FIXED: {
        mesh_event_root_fixed_t *root_fixed = (mesh_event_root_fixed_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_ROOT_FIXED>%s",
                 root_fixed->is_fixed ? "fixed" : "not fixed");
    }
    break;
    case MESH_EVENT_ROOT_ASKED_YIELD: {
        mesh_event_root_conflict_t *root_conflict = (mesh_event_root_conflict_t *)event_data;
        ESP_LOGI(MESH_TAG,
                 "<MESH_EVENT_ROOT_ASKED_YIELD>"MACSTR", rssi:%d, capacity:%d",
                 MAC2STR(root_conflict->addr),
                 root_conflict->rssi,
                 root_conflict->capacity);
    }
    break;
    case MESH_EVENT_CHANNEL_SWITCH: {
        mesh_event_channel_switch_t *channel_switch = (mesh_event_channel_switch_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_CHANNEL_SWITCH>new channel:%d", channel_switch->channel);
    }
    break;
    case MESH_EVENT_SCAN_DONE: {
        mesh_event_scan_done_t *scan_done = (mesh_event_scan_done_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_SCAN_DONE>number:%d",
                 scan_done->number);
    }
    break;
    case MESH_EVENT_NETWORK_STATE: {
        mesh_event_network_state_t *network_state = (mesh_event_network_state_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_NETWORK_STATE>is_rootless:%d",
                 network_state->is_rootless);
    }
    break;
    case MESH_EVENT_STOP_RECONNECTION: {
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_STOP_RECONNECTION>");
    }
    break;
    case MESH_EVENT_FIND_NETWORK: {
        mesh_event_find_network_t *find_network = (mesh_event_find_network_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_FIND_NETWORK>new channel:%d, router BSSID:"MACSTR"",
                 find_network->channel, MAC2STR(find_network->router_bssid));
    }
    break;
    case MESH_EVENT_ROUTER_SWITCH: {
        mesh_event_router_switch_t *router_switch = (mesh_event_router_switch_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_ROUTER_SWITCH>new router:%s, channel:%d, "MACSTR"",
                 router_switch->ssid, router_switch->channel, MAC2STR(router_switch->bssid));
    }
    break;
    case MESH_EVENT_PS_PARENT_DUTY: {
        mesh_event_ps_duty_t *ps_duty = (mesh_event_ps_duty_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_PS_PARENT_DUTY>duty:%d", ps_duty->duty);
    }
    break;
    case MESH_EVENT_PS_CHILD_DUTY: {
        mesh_event_ps_duty_t *ps_duty = (mesh_event_ps_duty_t *)event_data;
        ESP_LOGI(MESH_TAG, "<MESH_EVENT_PS_CHILD_DUTY>cidx:%d, "MACSTR", duty:%d", ps_duty->child_connected.aid-1,
                MAC2STR(ps_duty->child_connected.mac), ps_duty->duty);
    }
    break;
    default:
        ESP_LOGI(MESH_TAG, "unknown id:%d", event_id);
        break;
    }
}

void ip_event_handler(void *arg, esp_event_base_t event_base,
                      int32_t event_id, void *event_data)
{
    ip_event_got_ip_t *event = (ip_event_got_ip_t *) event_data;
    current_ip = event->ip_info.ip;
    ESP_LOGI(MESH_TAG, "<IP_EVENT_STA_GOT_IP>IP:" IPSTR, IP2STR(&event->ip_info.ip));

}

void app_main(void)
{
    
    gpio_pad_select_gpio(LED_BULTIN);
    // Configurar os pinos LED como output
    gpio_set_direction(LED_BULTIN, GPIO_MODE_OUTPUT);
    gpio_set_level(LED_BULTIN, 0);


    ESP_ERROR_CHECK(nvs_flash_init());
    /*  tcpip initialization */
    ESP_ERROR_CHECK(esp_netif_init());
    /*  event initialization */
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    /*  create network interfaces for mesh (only station instance saved for further manipulation, soft AP instance ignored */
    ESP_ERROR_CHECK(esp_netif_create_default_wifi_mesh_netifs(&netif_sta, NULL));
    /*  wifi initialization */
    wifi_init_config_t config = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&config));
    ESP_ERROR_CHECK(esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, &ip_event_handler, NULL));
    ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_FLASH));
    ESP_ERROR_CHECK(esp_wifi_start());
    

    /*  mesh initialization */
    ESP_ERROR_CHECK(esp_mesh_init());
    ESP_ERROR_CHECK(esp_event_handler_register(MESH_EVENT, ESP_EVENT_ANY_ID, &mesh_event_handler, NULL));
    /*  set mesh topology */
    ESP_ERROR_CHECK(esp_mesh_set_topology(CONFIG_MESH_TOPOLOGY));
    /*  set mesh max layer according to the topology */
    ESP_ERROR_CHECK(esp_mesh_set_max_layer(CONFIG_MESH_MAX_LAYER));
    ESP_ERROR_CHECK(esp_mesh_set_vote_percentage(1));
    ESP_ERROR_CHECK(esp_mesh_set_xon_qsize(128));
#ifdef CONFIG_MESH_ENABLE_PS
    /* Enable mesh PS function */
    ESP_ERROR_CHECK(esp_mesh_enable_ps());
    /* better to increase the associate expired time, if a small duty cycle is set. */
    ESP_ERROR_CHECK(esp_mesh_set_ap_assoc_expire(60));
    /* better to increase the announce interval to avoid too much management traffic, if a small duty cycle is set. */
    ESP_ERROR_CHECK(esp_mesh_set_announce_interval(600, 3300));
#else
    /* Disable mesh PS function */
    ESP_ERROR_CHECK(esp_mesh_disable_ps());
    ESP_ERROR_CHECK(esp_mesh_set_ap_assoc_expire(10));
#endif
    mesh_cfg_t cfg = MESH_INIT_CONFIG_DEFAULT();
    /* mesh ID */
    memcpy((uint8_t *) &cfg.mesh_id, MESH_ID, 6);
    /* router */
    cfg.channel = CONFIG_MESH_CHANNEL;
cfg.router.ssid_len = strlen(CONFIG_MESH_ROUTER_SSID); //CONFIG_MESH_ROUTER_SSID
    memcpy((uint8_t *) &cfg.router.ssid, CONFIG_MESH_ROUTER_SSID, cfg.router.ssid_len);
    memcpy((uint8_t *) &cfg.router.password, CONFIG_MESH_ROUTER_PASSWD,
           strlen(CONFIG_MESH_ROUTER_PASSWD));
    /* mesh softAP */
    ESP_ERROR_CHECK(esp_mesh_set_ap_authmode(CONFIG_MESH_AP_AUTHMODE));
    cfg.mesh_ap.max_connection = CONFIG_MESH_AP_CONNECTIONS;
    cfg.mesh_ap.nonmesh_max_connection = CONFIG_MESH_NON_MESH_AP_CONNECTIONS;
    memcpy((uint8_t *) &cfg.mesh_ap.password, CONFIG_MESH_AP_PASSWD,
           strlen(CONFIG_MESH_AP_PASSWD));
    ESP_ERROR_CHECK(esp_mesh_set_config(&cfg));
    /* mesh start */
    ESP_ERROR_CHECK(esp_mesh_start());
#ifdef CONFIG_MESH_ENABLE_PS
    /* set the device active duty cycle. (default:10, MESH_PS_DEVICE_DUTY_REQUEST) */
    ESP_ERROR_CHECK(esp_mesh_set_active_duty_cycle(CONFIG_MESH_PS_DEV_DUTY, CONFIG_MESH_PS_DEV_DUTY_TYPE));
    /* set the network active duty cycle. (default:10, -1, MESH_PS_NETWORK_DUTY_APPLIED_ENTIRE) */
    ESP_ERROR_CHECK(esp_mesh_set_network_duty_cycle(CONFIG_MESH_PS_NWK_DUTY, CONFIG_MESH_PS_NWK_DUTY_DURATION, CONFIG_MESH_PS_NWK_DUTY_RULE));
#endif
    ESP_LOGI(MESH_TAG, "mesh starts successfully, heap:%d, %s<%d>%s, ps:%d\n",  esp_get_minimum_free_heap_size(),
             esp_mesh_is_root_fixed() ? "root fixed" : "root not fixed",
             esp_mesh_get_topology(), esp_mesh_get_topology() ? "(chain)":"(tree)", esp_mesh_is_ps_enabled());
}
